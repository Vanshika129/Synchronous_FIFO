`timescale 1ns / 1ps

module Synchro_FIFO_tb;

    parameter DATA_WIDTH = 8;
    parameter DEPTH = 16;
    
    reg clk;
    reg rst;
    reg wr_en;
    reg rd_en;
    reg [DATA_WIDTH-1:0] din;
    wire [DATA_WIDTH-1:0] dout;
    wire full;
    wire empty;

    // Instantiate FIFO
    Synchro_FIFO #(DATA_WIDTH, DEPTH) FIFO (
        .clk(clk),
        .rst(rst),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .din(din),
        .dout(dout),
        .full(full),
        .empty(empty)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        // Initialize
        clk = 0;
        rst = 1;
        wr_en = 0;
        rd_en = 0;
        din = 0;

        // Reset FIFO
        #10 rst = 0;
        
        // Write some data
        #10 wr_en = 1;
        din = 8'hA1;
        #10 din = 8'hB2;
        #10 din = 8'hC3;
        #10 din = 8'hD4;
        #10 wr_en = 0; // Stop writing
        
        // Read data
        #10 rd_en = 1;
        #10 rd_en = 0;

        // Read remaining
        #10 rd_en = 1;
        #10 rd_en = 1;
        #10 rd_en = 1;
        #10 rd_en = 0; 

        // End simulation
        #50 $finish;
    end

    // Monitor outputs
    initial begin
        $monitor(" wr_en=%b rd_en=%b din=%h dout=%h full=%b empty=%b", 
                   wr_en, rd_en, din, dout, full, empty);
    end

endmodule

